Question #1: Turning Strings to URLs
URLs cannot have spaces. Instead, all spaces in a string are replaced with %20. Write an algorithm that replaces all spaces in a string with %20.

You may not use the replace() method or regular expressions to solve this problem. Solve the problem with and without recursion.


I need to split the string with split()
and Join them back together with join()
so:
________________________________________________________
Answer:
let str = 'Jasmine Ann Jones';
function replaced (string){
return  string.split(' ').join('%20'); 
}    
//I split the string with .split at the " " spaces and did .join to reassemble the string with '%20' instead of " "
________________________________________________________

Example
Input: "Jasmine Ann Jones"

Output: "Jasmine%20Ann%20Jones"
________________________________________________________



Question #2: Array Deduping
Write an algorithm that removes duplicates from an array. Do not use a function like filter() to solve this. Once you have solved the problem, demonstrate how it can be solved with filter(). Solve the problem with and without recursion.

1. remove duplicates from array:Input: "aaabccdddda"
2. do not use filter
3. use filter 
4. use recursion

using Set() I will convert [7, 9, "hi", 12, "hi", 7, 53] into the desired output.
Example
Input: [7, 9, "hi", 12, "hi", 7, 53]
Output: [7, 9, "hi", 12, 53]
__________________________________________________
Answer 1: not using filter
let array = [7, 9, "hi", 12, "hi", 7, 53];  // setting variable
let nonDup = [...new Set(array)];    //setting a new array to delete duplicates
(5) [7, 9, "hi", 12, 53]


A "Set()" is a collection of unique values.
Converting the array to a Set() removes all duplicate values.
Then I convert the Set back into an array.
____________________________________________________
Answer 2: using filter
let arr = [7, 9, "hi", 12, "hi", 7, 53];
function removeDup(arr) {
return arr.filter((value, index) => arr.indexOf(value) === index);
}
removeDup(arr);
(5)Â [7, 9, "hi", 12, 53]

Using filter() I created a new array that passed the conditional I provided.  Any element that fails the conditional will be filtered.
________________________________________________________





________________________________________________________
Question #3: Compressing Strings
Write an algorithm that takes a string with repeated characters and compresses them, using a number to show how many times the repeated character has been compressed. For instance, aaa would be written as 3a. Solve the problem with and without recursion.

Example
Input: "aaabccdddda"

Output: "3ab2c4da"
________________________________________________________
Answer: Run length encoding
Pick the first character from the string. 
Append the picked character to the destination string. 
Count the number of occurrences of the picked character and append the count to the destination string.
without recursion:

function compString(str)
  {
    let n = str.length;
    for ( let i = 0; i < n; i++)  //iterate through the string
    {
      //this will count the number of times the char is repeated
      let count = 1;
    while (i < n - 1 && str[i] == str[i+1])  adding a count to the string while deleting the extra elements
      {
        count++;
        i++;
      }

        console.log (str[i]);   
        console.log (count);
    }
  }
let str = "aaabbbbbcccccdddddeeeeeee";
compString(str);
a3b5c5d5e7

Answer3 with recursion:
function compress(str)


function compress(str){
    let compressedString = ""
    let strArray = str.split("") //split to string to iterate through
    for (let i = 0; i < strArray.length; i++){ //create new string to hold compressed version of the original  ,create loop

        let count = 1
        let currentLetter = strArray[i] //keep track of each iteration

        while (i < strArray.length - 1 && strArray[i] === strArray[i+1]){
     count++
          i++
        }
        if (count === 1){
          compressedString += currentLetter
        } else {
          compressedString += currentLetter + count
        }
      }
      return compressedString
    }

________________________________________________________


Question #4: Checking for Uniqueness
Write an algorithm that determines whether all the elements in a string are unique. You may not convert the string into an array or use array methods to solve this problem. The algorithm should return a boolean.
________________________________________________________

Example
Input: "hello"

Output: false

Input: "copyright"

Output: true
________________________________________________________
Answer4: Checking for Uniqueness

function uniqChar(str)  //name the function and pass in the string
  {
    for(let i = 0; i < str.length; i++) //run 2 loops i and j 
      for(j = i + 1; j < str.length; j++)
        if (str[i] == str[j]) //if they become = at any point return false
            return false;


    return true;  //if they are never == then return true
  }
________________________________________________________

Question #5: Array Sorting
Write an algorithm that sorts an array without using the sort() method. There are many different sorting algorithms - take the time to read about the following:

Quick sort
Merge sort
Heap sort
Insertion sort
Bubble sort
Selection sort
You may implement any of the above algorithms (or your own) to solve the problem - as long as it doesn't use sort().

Example
Input: [9, 2, 7, 12]

Output: [2, 7, 9, 12]

________________________________________________________
Answer5: using counting sort

let num = [9,6,7,8,1,2,3,4,5]

let count = []; //create a empty array for count
let i, z = 0; 
let max = Math.max(...num);  //make sure there is #'s inside num
    //start counter
    for (i = 0; i <= max; i++) {
        count[i] = 0;
    }
for (i=0; i < num.length; i++) {
        count[num[i]]++;    //move through the count and go to the end
    }
for (i = 0; i <= max; i++) {
        while (count[i]-- > 0) {   //iterate through the count until you reach 0
            num[z++] = i;       // in each iteration add the sorted number to the index
        }
}
//output sorted array
for (i=0; i < num.length; i++) {
console.log(num[i]);
}